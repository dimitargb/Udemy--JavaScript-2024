We can use the Spread Operator to expand an Array to all it's Elements.
Besically unpacking all the array Elements at once.

const arr = [7, 8, 9];
// And we want to create a new Array adding 1 and 2, based on this array at the beginning.
const theBadNewArray = [1, 2, arr[0], arr[1], arr[2]]; // this is a bad way
console.log(theBadNewArray);

// with the Spread Operator:
const newArray = [1, 2, ...arr]; // good way using the Spread Opertor, with the ... we expand the Array to it's all Elements
console.log(newArray); // [1, 2, 7, 8, 9]

What the Spread Operator does is take all the values of the arr Array and write them individually.

// if we want to log the individual Elements of the newArray:
console.log(...newArray); // 1,2,7,8,9 individually.

Whenever we need the Elements of an array individually, then we can use the Spread Operator.

// Adding new Elements to older Elements from mainMenu using the Spread Operator
const newMenu = [...restaurant.mainMenu, 'Gnocci'];
console.log(newMenu);

//Creating shallow copies:
const mainMenucopy = [...restaurant.mainMenu]; // shallow copy of the mainMenu.
console.log(`Shallow copy of mainManu: ${mainMenucopy}`);

// Joining 2 arrays or more:
const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];
console.log(menu);

The Spread Operator works on all iterables: all arrays, strings, maps or sets but not Objects!!!

Since the ES2018 the Spread Operator works on Objects as well, even Objects are not iterables.
//Objects:
// We can basically spread all the Elements form restaurant Ojects and add anything we want
const newRestaurant = {
  foundetIn: 1998,
  ...restaurant,
  founder: 'Dimitar Damianov',
};
console.log(newRestaurant); // this is a new Object with new property founder.

Since we can do shallow copies on arrays using the Spread Operator, we can od the same with Objects.