The bind() Method allows us to manually set the this keyword for any function call.
Bind does not imediately call the function. Instead it returns a new function where the his keyword is bound !!!
It is set to whatever value we pass into bind.

const lufthansa = {
  airline: 'Lufthansa',
  flightCode: 'LH',
  bookings: [],
  book(flightNum, name) {
    console.log(
      `${name} booked a seat on ${this.airline} flight ${this.flightCode}${flightNum}`
    );
    this.bookings.push({ flight: `${this.flightCode}${flightNum}`, name });
  },
};

const book = lufthansa.book; //we store here the function into a new variable !!!

//The this keyword points to the lufthansa Object when in a function !!!

lufthansa.book(239, 'Dimitar'); // Dimitar booked a seat on Lufthansa flight LH239
lufthansa.book(367, 'Mike Smith'); // Mike Smith booked a seat on Lufthansa flight LH637
console.log(lufthansa);

const eurowings = {
  airline: 'Eurowings',
  flightCode: 'EW',
  bookings: [],
};

book.call(eurowings, 23, 'Sara Williams');
book.call(lufthansa, 239, 'Dimitar');

const swiss = {
  airline: 'Swiss Air Lines',
  flightCode: 'LX',
  bookings: [],
};

book.call(swiss, 564, 'Marry Cooper'); // Marry Cooper booked a seat on Swiss Air Lines flight LX564

// 1. Bind Metod -> bind();

/* The first argument in the bind method is the this keyword -> bind(this, ....) */
// Using the bind method gives us a new function.
book.bind(eurowings); // this will return a new function where the this keyword will always be set to eurowings.
book.bind(lufthansa); // this will return a new function where the this keyword will always be set to lufthansa.

const bookEW = book.bind(eurowings); // this will return a new function where the this keyword will always be set to eurowings.
// So now let's use this function:
bookEW(23, 'Steven Williams'); // Steven Williams booked a seat on Eurowings flight EW23.

const bookLH = book.bind(lufthansa);
bookLH(75, 'Rumen Stamatov'); // Rumen Stamatov booked a seat on Lufthansa flight LH75.

const bookLX = book.bind(swiss);

/* In the bind method, we can pass multiple arguments, which will be defined and the function will be called with the same arguments. For example we can use bind to create a function for a specific airline and a specific flight number */
// Example bookEW23 but only specific for flight 23

const bookEW23 = book.bind(eurowings, 23); // so this function now only needs the name because the number is set to 23
bookEW23('Tatiana Pawlova'); // Tatiana Pawlova booked a seat on Eurowings flight EW23

/* We can use the bind method when we use Objects together with eventListeners */
/* We start  by adding a new proerty to lufthansa Object planes = 300. And we also add a new Method only to the 
   lufthansa Object called buyPlane */

lufthansa.planes = 300;
lufthansa.buyPlane = function () {
  console.log(this);
  this.planes++;
  console.log(this.planes);
}; // we add a new plane whewnever we click on the button Buy new plane

/* attaching the eventListeners to button with class 'buy' */
document
  .querySelector('.buy')
  .addEventListener('click', lufthansa.buyPlane.bind(lufthansa)); // 301, 302 ....

/* Parcial application for the bind Method, here many times we are not intresed in the this keyword, but we still use bind method
   Parcial application means that we can preset Paramethers. */

const addTax = (taxRate, value) => value + value * taxRate;
console.log(addTax(0.1, 200)); // 220;

// Let' say we use tax of 23% all the time and we want to create a function for that,
// null because we do not have this keyword

const addVAT = addTax.bind(null, 0.23); // this is with predifined value of 23%
// same as addVAT = value => value + value * 0.23;
console.log(addVAT(100)); // 123

// Creating a function that retuns another function.

const addTaxRate = function (rate) {
  return function (value) {
    return value + value * rate;
  };
};

const addVAT2 = addTaxRate(0.23);
console.log(addVAT(100)); // 123
console.log(addVAT(75)); // 92.25

